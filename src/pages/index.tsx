/* eslint-disable @next/next/no-img-element */
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
// import Link from "next/link";

import type { RouterOutputs } from "~/utils/api";
import { api } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingPage } from "~/components/Loading";

import { SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import { useState } from "react";
dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  const [input, setInput]= useState("")

  const ctx = api.useContext();

  const {mutate, isLoading: createPostLoading}= api.posts.create.useMutation(
    {
      onSuccess: ()=> {
        setInput("");
        void ctx.posts.getAll.invalidate()
      }
    }
  );



  if (!user) return null;
  return (
    <div className="flex w-full gap-3">
      <Image
        src={user.profileImageUrl}
        alt="Profile Image"
        className="h-14 w-14 rounded-full"
        width={100}
        height={100}
      />
      <input
        placeholder="Type some emojis"
        className="w-full bg-transparent p-3 outline-none"
        type="text"
        value={input}
        onChange={(e)=> setInput(e.target.value)}
        disabled={createPostLoading}
      />

      <button type="submit" onClick={()=> mutate({content: input})} disabled={createPostLoading} >Post</button>
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;
  return (
    <div key={post.id} className=" flex gap-3 border-b border-slate-400 p-4">
      <Image
        src={author.profilePicture}
        alt="author profile pic"
        className="h-14 w-14 rounded-full"
        width={100}
        height={100}
      />

      <div className="flex flex-col">
        <div className="">
          <span>{`@${author.username}`} </span> .{" "}
          <span className="text-xs">{`${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>
        <span className=" text-lg">{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) return <LoadingPage />

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data.map((fullpost) => {
        return <PostView key={fullpost.post.id} {...fullpost} />;
      })}
    </div>
  );
};

const Home: NextPage = () => {
  // const hello = api.posts.hello.useQuery({ text: "from tRPC" });

  const { isLoaded: userLoaded, isSignedIn } = useUser();

  // start fetching ASAP
 api.posts.getAll.useQuery();

  // return empty div if user is not loaded
  if (!userLoaded) return <div />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex justify-center ">
        <div className=" h-screen w-full border-x border-x-slate-100 md:max-w-2xl ">
          <div className="border-b border-slate-400 p-4">
            {/* {!isSignedIn ? <SignInButton /> : <SignOutButton />} */}
            {isSignedIn ? <CreatePostWizard /> : null}
          </div>
          {/* <SignIn path="/sign-in" routing="path" signUpUrl="/sign-up" /> */}

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
